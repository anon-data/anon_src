(* BEGIN PROVERIF for Edge-Key Protocol TLS1.2 RSA *)
set traceDisplay = long.

(* === DECLARATIONS === *)

free pubCh:channel.
free lurkCh:channel [private].
free compromisedCh:channel.

type skey.
type pkey.
type id.
const PrfID:id.

type lurkkw.
const MS:lurkkw.
type lurkhdr.
const TLS12RequestHeader, TLS12MasterRSARequestPayload,
        TLS12ResponseHeader, TLS12MasterResponsePayload:lurkhdr.
type tlshdr.
const ClientHello, ServerHello, ClientKeyExchange:tlshdr.

(* assymetric encryption - the usual constructors and destructors *)
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring[private].
reduc forall m:bitstring, sk:skey; adec(aenc(m,pk(sk)),sk) = m[private].

(* concatenation function with implicit destructor *)
fun concat(bitstring, lurkkw, bitstring, bitstring):bitstring [data].

fun prf(bitstring):bitstring.(* pseudorandom function mastersecret *)
fun getkeyid(pkey): id [data].
free privkey:skey [private]. (* one keyServer holding a private key *)

(*EVENTS to test premaster key usage*) (*not all used*)
event client_sent_encpremaster(bitstring).
event edge_resent_encpremaster(bitstring, bitstring).
event keyserver_received_encpremaster(bitstring, bitstring).

(* Security properties *)

query attacker(privkey).
query attacker(pk(privkey)).

query encpremaster:bitstring, srvrand:bitstring;
    inj-event(keyserver_received_encpremaster(encpremaster, srvrand))
        ==> inj-event(client_sent_encpremaster(encpremaster)).

query encpremaster:bitstring, srvrand:bitstring;
    inj-event(keyserver_received_encpremaster(encpremaster, srvrand))
        ==> inj-event(edge_resent_encpremaster(encpremaster, srvrand)).

query secret mastersecretclient.

query secret srnd.

(* === PROCESS MACROS === *)

let UE() = (* end-user *)
	new client_random:bitstring;
	out(pubCh,(ClientHello,client_random));
	in(pubCh,(=ServerHello,srnd:bitstring,pubServKey:pkey));
	new premaster:bitstring;
	event client_sent_encpremaster(premaster);
	out (pubCh,(ClientKeyExchange, aenc(premaster,pubServKey)));
	let concparamsclient:bitstring = concat(premaster, MS,
                                        client_random, srnd) in
    let mastersecretclient:bitstring = prf(concparamsclient).

let EdgeServer(pubKey:pkey,kid:id) =
	in(pubCh,(=ClientHello,crnd:bitstring));
	new server_random:bitstring;
	out(pubCh,(ServerHello,server_random,pubKey));
	in(pubCh,(=ClientKeyExchange,encpremaster:bitstring));
	event edge_resent_encpremaster(encpremaster, server_random);
	let lurk_srv_rnd:bitstring = server_random in
	out(lurkCh,(TLS12RequestHeader,TLS12MasterRSARequestPayload,
                    kid,crnd,server_random,PrfID,encpremaster));
	in(lurkCh,(=TLS12ResponseHeader,=TLS12MasterResponsePayload,
                recmaster:bitstring)).

let KeyServer(secKey:skey,pubkey:pkey) =
	in(lurkCh,(=TLS12RequestHeader,=TLS12MasterRSARequestPayload,
        keyID:id,client_rnd:bitstring,server_rnd:bitstring,=PrfID,
        encryptedpremastersecret:bitstring));
	if keyID = getkeyid(pubkey) then
	(
		let premaster:bitstring = adec(encryptedpremastersecret,privkey)
		in event keyserver_received_encpremaster(premaster, server_rnd);
		let concparams:bitstring = concat(premaster, MS, client_rnd,
                                        server_rnd) in
		let mastersecret:bitstring = prf(concparams) in
		out(lurkCh,(TLS12ResponseHeader,
            TLS12MasterResponsePayload,mastersecret))
	).

(* === MAIN PROCESS === *)

process
    out(compromisedCh, lurkCh);
	let pubkey = pk(privkey) in
	let keyid:id = getkeyid(pubkey) in
	(
		(!UE()) |
		(!EdgeServer(pubkey,keyid)) |
		(!KeyServer(privkey,pubkey))
	)
